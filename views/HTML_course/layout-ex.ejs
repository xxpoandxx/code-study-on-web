<!-- エクササイズ用の EJS テンプレート
    # パラメータ
    title: サイトタイトル
    talks: <トークのオブジェクト>[]
    courseId: コース ID (例: "html3")
    aiPrompt: AI 用のプロンプト
    relations: {
        back: もどるボタンのパス
        next: 次ボタンのパス
    }
    # <トークのオブジェクト>
    {
        speaker: トークしてる人(teacher|student)
        type: トークのタイプ(speech|assignment)
        htext: トークのテキスト(ハイパーテキスト)
    }
-->
<!DOCTYPE html>
<html lang="ja">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" type="text/css" href="../../../stylesheets/exercise.css">
    <script src="/javascripts/localstorage.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/htmlhint@1.1.4/dist/htmlhint.min.js"></script>
    <title><%= title %></title>
</head>

<body>
    <h1><%= title %></h1>
    <div class="column-main">
        <div class="talk">

        <% let asgmt = 0; %>
        <% console.log(talks)%>
        <% talks.forEach((talk) => { %>
            <div class="balloon">

            <% if (talk.speaker == 'teacher') { %>

                <!-- speaker の分岐 / teacher -->
                <figure class="balloon-image-left">
                    <img src="/images/piyo.png" alt="せんせい">
                    <figcaption class="balloon-image-description">せんせい</figcaption>
                </figure>
                <div class="balloon-text-right">

            <% } else if (talk.speaker == 'student') { %>

                <!-- speaker の分岐 / student -->
                <figure class="balloon-image-right">
                    <img src="/images/pen.png" alt="せいとくん">
                    <figcaption class="balloon-image-description">せいとくん</figcaption>
                </figure>
                <div class="balloon-text-left">

            <% } %>

                <% if (talk.type == 'assignment') { %>

                    <!-- type の分岐 / assignment -->
                    <% asgmt = asgmt + 1; %>
                    <p>
                        <span style="font-size:20px;font-weight:bold;">[演習<%= asgmt %>]</span><br>
                        <%- talk.htext %>
                    </p>

                <% } else if (talk.type == 'speech') { %>

                    <!-- type の分岐 / speech -->
                    <p>
                        <%- talk.htext %>
                    </p>

                <% } %>

                </div><!-- End of <div class="balloon-text-right|balloon-text-left"> -->
            </div><!-- End of <div class="balloon"> -->

        <% }); %>

        </div><!-- End of <div class="talk"> -->
        <h2>HTML</h2>
        <div id="html-editor" style="background-color: #fff;"></div>

        <h2>CSS</h2>
        <div id="css-editor" style="background-color: #fff;"></div>

        <h2>JavaScript</h2>
        <div id="javascript-editor" style="background-color: #fff;"></div>

        <div id="imagebox">
            <p>ここに画像をドラッグ＆ドロップしてください</p>
            <template id="file-names-template">
                <div class="file-names-i">
                    <img class="test" src="/images/structure.png">
                    <i class="fa-solid fa-xmark"></i>
                    <p><!--ドラッグ&ドロップした画像の名前が入ります--></p> 
                    <input type="hidden" value="">
                </div>
            </template>
            <div id="file-names"><!-- templateで作られたfile-name-iのdivが入ります--></div>
            <button id="imagePlus"><i class="fa-solid fa-plus"></i></button>
            <button id="imageMinus"><i class="fa-solid fa-minus"></i></button>
            <input type="file" class="uploadButton" accept="image/png, image/jpeg" id="initialUploadButton" multiple>
        </div>
        <div id="gallery"></div>

        <button id="downloadButton" class="course-button">
            <i class="fa-solid fa-download"></i>
        </button>
        <button id="doJudgement" type="button" class="course-button" style="margin:30px 280px;display:block;">評価する
            </button>
        <div id="api-response"></div>
        <!--<button id="doPreviewUpdate" type="button" class="course-button" style="margin:30px 280px;display:block;">REFRESH!
        </button> -->
        <button id="doPreviewSave" type="button" class="course-button" style="margin:30px 280px;display:block;" >SAVE!</button>

        <a href="html3#ex1" class="course-button" style="margin:auto;">トークに戻る</a>
        </div>
    <div class="column-sub">
        <iframe id="preview" style="background-color:#fff; position:fixed;"></iframe>
    </div>
    </div>
    <footer>
        <a class="back" href="<%= relations.back %>">もどる</a>
        <a class="back" href="<%= relations.next %>">次へ</a>
    </footer>
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const target = document.getElementById("preview");

            // (1)ページ読み込み時に一度だけスクロール量を出力
            let scroll_y = window.scrollY;
            console.log(scroll_y);

            // (2)スクロールするたびにスクロール量を出力
            window.addEventListener('scroll', (event) => {
                let scroll_y = window.scrollY;
                if (scroll_y > 165) {
                    target.classList.add("fullsize");
                    target.style.height = `calc(100vh - 18px)`
                } else {
                    target.classList.remove("fullsize");
                    target.style.height = `calc(100vh - 18px - 165px + ${scroll_y}px)`
                }
            });
        })

         // 画像をアップロードする関数
         //change(状態が変わったら) click→クリックしただけで反応
        // document.addEventListener('change',uploadImage);
        
        // let file;
        // let uri;

        // function uploadImage(e) {   
        //     console.log(e.target)  
        //     file = e.target.files[0]
        //     var reader = new FileReader()
        //     reader.onload = function (e) {
        //         uri = e.target.result
        //         hogehoge(file, uri)
        //     }
        //     reader.readAsDataURL(file)
        //     console.log(file, uri)
        // }


        // ファイルが大きすぎるとエラー
        const imageboxonChange = (changeEvent) => {
            const files = changeEvent.target.files;
            for (let i = 0; i< files.length; i++) {
                const file = files[i];

                const reader = new FileReader();
                reader.onload = (e) => {
                    const uri = e.target.result;
                    const fileName = file.name;
                    const fileType = file.type;
                    hogehoge(fileName, fileType, uri);
                    appendFileName(uri, fileName);
                    changeEvent.target.value = '';
                }
                reader.readAsDataURL(file);
            }
        }
        document.getElementById('initialUploadButton').addEventListener('change',imageboxonChange);

        const imagePlus = () => {
            const box = document.getElementById('imagebox');
            const input = document.createElement('input');
            input.classList.add('uploadButton');
            input.accept="image/png, image/jpeg";
            input.type='file';
            input.multiple=true;
            input.addEventListener('change',imageboxonChange);
            box.appendChild(input);
        } 
        document.getElementById('imagePlus').addEventListener('click',imagePlus);

        const imageMinus =()=>{
            const box = document.getElementById('imagebox');
            const target = box.lastElementChild;
            // console.log(target.files,target.files.length);
            if(target.files !== 0){
            for(let i = 0; i < target.files.length; i++){
                const file = target.files[i];
                deleteImage(file.name);
            }
        }
            box.lastElementChild.remove();
            // const inputList = box.getElementsByClassName('uploadButton');
            // inputList[inputList.length-1].remove();
        }
        document.getElementById('imageMinus').addEventListener('click',imageMinus);

        let dropArea = document.getElementById('imagebox');
        let fileNamesDiv = document.getElementById('file-names');

        // Prevent default drag behaviors
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach((eventName) => {
            dropArea.addEventListener(eventName, preventDefaults, false);
            document.body.addEventListener(eventName, preventDefaults, false);
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        // Highlight drop area when item is dragged over it
        ['dragenter', 'dragover'].forEach(eventName => {
            dropArea.addEventListener(eventName, highlight, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, unhighlight, false);
        });

        function highlight(e) {
            dropArea.classList.add('highlight');
        }

        function unhighlight(e) {
            dropArea.classList.remove('highlight');
        }

        // Handle dropped files
        dropArea.addEventListener('drop', handleDrop, false);

        // const files = changeEvent.target.files;
        //     for (let i = 0; i< files.length; i++) {
        //         const file = files[i];

        //         const reader = new FileReader();
        //         reader.onload = (e) => {
        //             const uri = e.target.result;
        //             const fileName = file.name;
        //             const fileType = file.type;
        //             hogehoge(fileName, fileType, uri);
        //         }
        //         reader.readAsDataURL(file);
        //     }

        //わからん

        function handleDrop(e) {
            let dt = e.dataTransfer;
            let files = dt.files;

            // Clear previous file names
            // fileNamesDiv.innerHTML = '';

            // Display file names
            for (let i = 0; i < files.length; i++) {
                let file = files[i];
                //let fileName = document.createElement('p');
                //fileName.textContent = file.name;
                //fileNamesDiv.appendChild(fileName);
                const reader = new FileReader();
                reader.onload = (e) => {
                    const uri = e.target.result;
                    const fileName = file.name;
                    const fileType = file.type;
                    hogehoge(fileName, fileType, uri);
                    appendFileName(uri,fileName);
            }
            reader.readAsDataURL(file);
            }
        }


        function appendFileName(uri,name){
            const fileNamesElement = document.getElementById('file-names');
            const thisIndex = fileNamesElement.getElementsByClassName('file-names-i').length;
            const template = document.getElementById('file-names-template');
            const clone = template.content.cloneNode(true); //クローンの作成。これに対して、idやclassをあてられる
            const imageElement = clone.querySelector('.test');
            imageElement.src = uri;
            const inputElement = clone.querySelector('input');
            inputElement.value = name;
            const iElement =  clone.querySelector('i');
            iElement.addEventListener('click',()=>{
                removeFileName(thisIndex);
            });
            const pElement = clone.querySelector('p');
            pElement.innerText = name;
            fileNamesElement.appendChild(clone);
         }


         function removeFileName(index){
            const fileNamesElement = document.getElementById('file-names');
            const targetElement = fileNamesElement.getElementsByClassName('file-names-i')[index];
            const targetFileName = targetElement.getElementsByTagName('input')[0].value;
            deleteImage(targetFileName);
            targetElement.remove();
        }


    </script>

    <script type="importmap">
        {
            "imports": {
                "codemirror/": "https://deno.land/x/codemirror_esm@v6.0.1/esm/"
            }
        }
    </script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.0/FileSaver.min.js" inline>
    </script>

    <script async type="module" inline>
        import { basicSetup } from "codemirror/codemirror/dist/index.js"
        import { html } from "codemirror/lang-html/dist/index.js";
        import { css } from "codemirror/lang-css/dist/index.js";
        import { javascript } from "codemirror/lang-javascript/dist/index.js";
        import { EditorState } from "codemirror/state/dist/index.js";
        import { EditorView, keymap } from 'codemirror/view/dist/index.js';
        import {
            // lintGutter,
            setDiagnostics,
            lintKeymap,
        } from "codemirror/lint/dist/index.js"

        //import 'https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.0/FileSaver.min.js';

        const htmlEditor = document.getElementById('html-editor');
        const cssEditor = document.getElementById('css-editor');
        const javascriptEditor = document.getElementById('javascript-editor');
        const previewIframe = document.getElementById('preview');

        // 各エディタのプレースホルダー
        let savedCodes = hugahuga("<%= courseId %>");
        const placeholderCodes = {
            html: savedCodes.html??`<!-- ここにhtmlコードを書いてください -->
            


            
            `,
            css: savedCodes.css??`/* ここにcssコードを書いてください */
            


            
            
            `,
            javascript: savedCodes.js??`// ここにjavascriptコードを書いてください
            
            
            



            `
        };


        let reList = [];
        const eventHandlers = EditorView.domEventHandlers({
            blur(event, view){
                doPreviewSave();
                updatePreview();
                validateHTML();
            },
            input(event, view){
                if (reList.length > 0) {
                    for (let i = 0; i < reList.length; i++) {
                        clearTimeout(reList[i]);
                    }
                    reList = [];
                }
                const nextRe =setTimeout(() => {
                    doPreviewSave();
                    updatePreview();
                    validateHTML();

                },1000)
                reList.push(nextRe);
            }
        });



        // Code Mirror セットアップ
        const htmlView = new EditorView({
            parent: htmlEditor,
            state: EditorState.create({
                doc: placeholderCodes.html,
                extensions: [basicSetup, html(), eventHandlers, keymap.of(lintKeymap)]
            })
        });

        const cssView = new EditorView({
            parent: cssEditor,
            state: EditorState.create({
                doc: placeholderCodes.css,
                extensions: [basicSetup, css(), eventHandlers, keymap.of(lintKeymap)]
            })
        });

        const javascriptView = new EditorView({
            parent: javascriptEditor,
            state: EditorState.create({
                doc: placeholderCodes.javascript,
                extensions: [basicSetup, javascript(), eventHandlers, keymap.of(lintKeymap)]
            })
        });

        // ブラウザに戻ってきた時にすぐ、元書いてあるコードがプレビューに表示させる
        updatePreview();

        // HTMLの構文検査をする
        function validateHTML() {
            const code = getCodes();
            // 検査
            const results = HTMLHint.HTMLHint.verify(code.html);
            console.log('code.html.length', code.html.length)

            if (results.length > 0) {
                const rows = code.html.split('\n'); // 改行文字でHTMLコードを line に分割
                const strLengthInRow = rows.map((row) => row.length); // 1 line ごとの文字数
                console.log('strLengthInRow', strLengthInRow)
                // diagnostics = CodeMirrorにエラー部分を指示するためのオブジェクトが入る
                const diagnostics = results.map((res, idx) => {
                    console.log(`HTMLHintによるHTML構文検査結果 (${idx})`, res);
                    const beforeRows = strLengthInRow.slice(0, res.line-1); // 先頭から、該当 line までの文字数配列
                    const beforeRowsSum = beforeRows.reduce((sum, elem) => sum + elem); // 先頭から、該当 line までの文字数合計
                    const rowStart = beforeRowsSum + 1; // HTMLコード先頭から、該当 line の先頭までの文字数
                    const from = rowStart + res.col; // rowStart を踏まえた、コード先頭から該当 col までの文字数
                    const to = from + (res.evidence).length; // res.evidence は該当の文字列。それの文字数を足すことで該当 col の最後尾までの文字数がわかる
                    const message = res.message; // エラーメッセージ
                    return { from, to, severity: 'error', message };
                    // const diagnostics = [{ from: 0, to: 500, severity: 'error', message: 'まちがっているよー。' }];
                    // cssView.dispatch(setDiagnostics(cssView.state, diagnostics));
                    // javascriptView.dispatch(setDiagnostics(javascriptView.state, diagnostics));
                });
                console.log('diagnostics', diagnostics);
                htmlView.dispatch(setDiagnostics(htmlView.state, diagnostics));
            } else {
                // エラーなしのとき初期化
                htmlView.dispatch(setDiagnostics(htmlView.state, []));
            }
        }
        

        // State 取得用
        function getCodes() {
            const html = htmlView.state.doc.toString();
            const css = cssView.state.doc.toString();
            const javascript= javascriptView.state.doc.toString();
            
            return {
                html, css, javascript,
                doc: `<!DOCTYPE html>
<html>\n<head>\n<meta charset="UTF-8">
<style>\n${css}\n</style>\n</head>
<body>\n${html}\n<body>\n</html>`,
            };
        }

        function doJudgement(){
            const codes = getCodes();
            fetch('/apiuse/codereview',{
                method:'post',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    html: codes.html,
                    css: codes.css,
                    javascript: codes.javascript,
                    doc: codes.doc,
                    aiprompt: `<%= aiPrompt %>`
                }),
            }).then((response)=>{
                return response.text();
            }).then((text)=>{
                console.log(text);
            }).catch((error)=>{
                console.log(error);
            })
        }
        document.getElementById('doJudgement').addEventListener('click',doJudgement);
        //GeminiAPIの使用

//         function doJudgement() {
//     const codes = getCodes();
//     fetch('/apiuse/codereview', {
//         method: 'post',
//         headers: {
//             'Content-Type': 'application/json',
//         },
//         body: JSON.stringify({
//             html: codes.html,
//             css: codes.css,
//             javascript: codes.javascript,
//             doc: codes.doc,
//             aiprompt: ``
//         }),
//     })
//     .then(response => {
//         return response.json();
//     })
//     .then(data => {
//         // コンソールに表示する代わりにWebページに表示
//         const apiResponseElement = document.getElementById('api-response');
//         apiResponseElement.innerText = data.message; // GeminiAPIの回答を表示
//     })
//     .catch(error => {
//         console.log(error);
//         document.getElementById('api-response').innerText = '';
//     });
// }

// document.getElementById('doJudgement').addEventListener('click', doJudgement);




        function replaceImage(doc){
            let str = doc;
            const match = str.match(/<img[^<>]*>/g);
            console.log(match);
            if(match !== null){
            for (let i = 0; i < match.length; i++) {
                const img = match[i];
                // console.log('original img:', img);
                
                const imgsrc = img.match(/(?<=src=").+(?=")/);
                const file = getHogehoge(imgsrc);
                if(file === null){
                    continue;
                }
                const filledImg = img.replace(/(?<=src=").+(?=")/, file.uri);
                // console.log('filledImg:', filledImg);
                
                str = str.replace(img, filledImg);
                };
            }
            return str;
        }


        // プレビュー
        function updatePreview() {
            const codes = getCodes();
            // 05.17
            // const file = getHogehoge(); // LS から保存したファイルを取得
            // // file データがない → ただ表示するだけ
            // if (file === null) {
            //     previewIframe.srcdoc = codes.doc;
            //     return;
            // }
            
            // // file データあり→imgタグ置き換え
            // const replaced = codes.doc.replaceAll(file.name, file.uri);
            previewIframe.srcdoc = replaceImage(codes.doc);
        }

        function doPreviewSave() {
            const codes = getCodes();
            setCode("<%= courseId %>", codes.html, codes.css, codes.javascript);
        }

        document.getElementById("doPreviewSave").addEventListener("click", doPreviewSave);

        // window.setInterval(updatePreview, 100);
        //document.getElementById("doPreviewUpdate").addEventListener("click", updatePreview);

        // ダウンロードボタンが押されたら起動
        function downloadFile(){
            // const blobx = new Blob(["Hello, world!"], {type: "text/plain;charset=utf-8"});
            // saveAs(blobx, "hello world.txt");  
            console.log('file dlownloading');

            const codes = getCodes();

            // HTML ファイルダウンロード
            const date = new Date()
            const y = date.getFullYear()
            const m = date.getMonth() +1
            const d = date.getDate()

            const filename = `mycode-${y}${m}${d}.html`;

            const bom  = new Uint8Array([0xEF, 0xBB, 0xBF]); // UTF-8だと示すためのバイトオーダーマーク
            const blob = new Blob([ bom, codes.doc ], { "type" : "text/html" });
            saveAs(blob, filename);   
            // blobx→blobというプロジェクト。バイナリーデータ（コンピュータが読めるデータのこと）。

            // IMG ファイルダウンロード
            // 考え中
        }

        // ダウンロードリンクが押されたら起動
        document.getElementById("downloadButton").addEventListener("click", downloadFile);

    </script>

    <style>
        #imagebox{
            width: calc(100% - 40px - 4px); /*paddingとborderの分を引いてます*/
        }
        .file-names{
            width: 100%;
        }
        .file-names-i{
            position: relative;
            display: inline-block;
            width: 100px;

        }
        .file-names-i img{
            object-fit: cover;
            display: block;
            width:  100px;
            height: 100px;
        }
        .file-names-i i{
            width: 10px;
            height: 10px;
            position: absolute;
            top: 0;
            right: 0;
        }
    </style>
</body>

</html>
