<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>リアルタイムエディタだよ〜</title>
</head>
<style>
    .containor{
        display: flex;
    }
    .containor-column {
        width: 50%;
    }
    #preview{
        width: 100%;
        height: 80vh;
        border: 1px solid black;
    }
</style>

<body>
    <h1>CM6</h1>
    <div class="containor">
        <div class="containor-column">
            <h2>html</h2>
            <div id="html-editor"></div>

            <h2>css</h2>
            <div id="css-editor"></div>

            <h2>javascript</h2>
            <div id="javascript-editor"></div>
        </div>
        <div class="containor-column">
            <iframe id="preview"></iframe>
        </div>
    </div>

    <script type="importmap">
        {
            "imports": {
                "codemirror/": "https://deno.land/x/codemirror_esm@v6.0.1/esm/"
            }
        }
    </script>
    <script async type="module">
        import { basicSetup } from "codemirror/codemirror/dist/index.js"
        import { html } from "codemirror/lang-html/dist/index.js";
        import { css } from "codemirror/lang-css/dist/index.js";
        import { javascript } from "codemirror/lang-javascript/dist/index.js";
        import { EditorState } from "codemirror/state/dist/index.js";
        import { EditorView, keymap } from 'codemirror/view/dist/index.js'

        const htmlEditor = document.getElementById('html-editor');
        const cssEditor = document.getElementById('css-editor');
        const javascriptEditor = document.getElementById('javascript-editor');
        const previewIframe = document.getElementById('preview');

        // 各エディタのプレースホルダー
        const placeholderCodes = {
            html: `<h1>hoghoeg</h1>`,
            css: ``,
            javascript: ``
        }

        // Code Mirror セットアップ
        const htmlView = new EditorView({
            parent: htmlEditor,
            state: EditorState.create({
                doc: placeholderCodes.html,
                extensions: [basicSetup, html()]
            })
        });

        const cssView = new EditorView({
            extensions: [basicSetup, css()],
            parent: cssEditor,
            state: EditorState.create({
                doc: placeholderCodes.css,
                extensions: [basicSetup, css()]
            })
        });

        const javascriptView = new EditorView({
            parent: javascriptEditor,
            state: EditorState.create({
                doc: placeholderCodes.javascript,
                extensions: [basicSetup, javascript()]
            })
        });

        // プレビュー
        function updatePreview() {
            const htmlCode = htmlView.state.doc.toString();
            const cssCode = cssView.state.doc.toString();
            const javascriptCode = javascriptView.state.doc.toString();

            const coveredCssCode = `<style>${cssCode}</style>`;
            const coveredJavascriptCode = `<script>${javascriptCode}</scr${'ipt'}>`; // エスケープ処理

            const combinedCode = `
                <html>
                <head>${cssCode}</head>
                <body>${htmlCode}${coveredJavascriptCode}</body>
                </html>
            `;

            previewIframe.srcdoc = combinedCode;
        }

        window.setInterval(updatePreview, 100);

    </script>
    
</body>

</html>



<!--<script>
    const htmlInput = document.getElementById('html-editor');
    const preview = document.getElementById('preview');

    function updatePreview() {
  const htmlCode = htmlInput.value;

  const combinedCode = `
    <html>
    <head>${cssCode}</head>
    <body>${htmlCode}${jsCode}</body>
    </html>
  `;

  preview.srcdoc = combinedCode;
}

htmlInput.addEventListener('input', updatePreview);

</script> -->